CC = gcc
WARN_FLAGS = -Wall -Wno-cpp -Wno-implicit-function-declaration \
             -Wno-char-subscripts -Wno-int-conversion -Wno-unused-result  
DEBUG_FLAGS = -g3 -ggdb3 -O0
C_STD = -std=gnu99
LIBS = -lcrypto -lcurl
DEFINES = 

WOLF = agent.c session.c csr.c lib/json.c httpclient.c lib/base64.c dto.c \
       inventory.c management.c utils.c schedule.c enrollment.c logging.c \
       config.c serialize.c fetchlogs.c

WOLFLIBS = -I ./ -I/usr/local/include/wolfssl -I/usr/local/include/curl \
           -L/usr/local/lib -L/usr/local/include/wolfssl/wolfcrypt \
           -L/usr/local/include/wolfssl -lcurl -lwolfssl

WOLFGM    = wolfssl_wrapper/wolfssl_wrapper.c DRCode/DRIF.c agent.c session.c \
            csr.c lib/json.c httpclient.c lib/base64.c dto.c inventory.c \
            management.c utils.c schedule.c enrollment.c logging.c config.c \
            dr_agent.c api_test.c serialize.c fetchlogs.c

GMOPENSSL = openssl_wrapper/openssl_wrapper.c DRCode/DRIF.c agent.c session.c \
            csr.c lib/json.c httpclient.c lib/base64.c dto.c inventory.c \
            management.c utils.c schedule.c enrollment.c logging.c config.c \
            dr_agent.c api_test.c serialize.c fetchlogs.c

api_test: DEFINES += -D __OPEN_SSL__ -D __KEYFACTOR_LOCAL_TESTING__ -D _DEBUG
api_test: ${GMOPENSSL}
	gcc -Wall ${DEBUG_FLAGS} ${C_STD} ${DEFINES} -o api_test ${GMOPENSSL} ${LIBS}

wolftest: DEFINES += -D __WOLF_SSL__ -D __KEYFACTOR_LOCAL_TESTING__ -D _DEBUG
wolftest: ${WOLFGM}
	gcc -Wall ${DEBUG_FLAGS} ${C_STD} ${DEFINES} -o api_test ${WOLFGM} ${WOLFLIBS}

test: wolftest

# only define those builds where the path is different from the build location

json.o: lib/json.c
	$(info compiling $^)
	- @${CC} ${DEFINES} ${WARN_FLAGS} ${DEBUG_FLAGS} ${C_STD} -c $^

base64.o: lib/base64.c
	$(info compiling $^)
	- @${CC} ${DEFINES} ${WARN_FLAGS} ${DEBUG_FLAGS} ${C_STD} -c $^

DRIF.o: DRCode/DRIF.c
	$(info compiling $^)
	- @${CC} ${DEFINES} ${WARN_FLAGS} ${DEBUG_FLAGS} ${C_STD} -c $^

rpi_gpio.o: RPI/rpi_gpio.c
	$(info compiling $^)
	- @${CC} ${DEFINES} ${WARN_FLAGS} ${DEBUG_FLAGS} ${C_STD} -c $^

# now define the generic builds
%.o: %.c
	$(info $@ +++ $<)
	- @${CC} ${DEFINES} ${WARN_FLAGS} ${DEBUG_FLAGS} ${C_STD} -c $^

# define the clean or delete commands
.PHONY: deleteallobs
deleteallobs:
	$(info deleting all object files)
	@for i in *.o; do \
		if [ -f $$i ]; then $(info deleting intermediate object files) rm $$i; fi; \
	done;
	$(info deleting executable files)
	@if [ -f api_test ]; then rm api_test; fi;
	$(info *** All objects removed successfully ***)

cleanall: deleteallobs
	
clean: deleteallobs